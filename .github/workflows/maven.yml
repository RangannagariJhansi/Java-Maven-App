# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  # Define git user email and name to be used for git commits
  GIT_USER_EMAIL: "actions@github.com"
  GIT_USER_NAME: "GitHub Actions"
  CHILD_SPRING_APPS_PROJECT_NAME : ${{ secrets.CHILD_SPRING_APPS_PROJECT_NAME}}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY}}
  ## ENV_CONFIG_FILE: ".github/env-variables.txt"

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
  
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      # Run unit tests
    - name: Run Unit Tests
      env:
         ARTIFACTORY_TOKEN: ${{ secrets[env.ARTIFACTORY_TOKEN_SECRET_NAME] }}
         ARTIFACTORY_USER: ${{ env.ARTIFACTORY_USER }}
      shell: sh
      run: mvn test
    - name: Get Code Coverage File Path
      shell: sh
      run: |
          echo CODE_COV_RESULTS_ARTIFACT=$(find . -iname "*jacocoTestReport.xml*") >> $GITHUB_ENV
          echo ${{ env.CODE_COV_RESULTS_ARTIFACT }}
          echo ${{ secrets.SONAR_PROJECT_KEY }}

      # Find unit test results file and rename it
    - name: Get Unit Test Results File Path and Rename
      shell: sh
      id: unit_test_file_name
      run: |
          mkdir unit-test-results
          mv $(find . -iname "*TEST-*.xml*") unit-test-results
           echo UNIT_TEST_RESULTS_XML=unit-test-results/*.xml >> $GITHUB_ENV
           echo "UNIT_TEST_RESULTS_XML=${UNIT_TEST_RESULTS_XML}" >> $GITHUB_OUTPUT

      # Create unit test results-report for easy developer review within GitHub ecosystem
    - name: Create Unit Test Results Report
      id: unit_test_report
      uses: dorny/test-reporter@v1.6.0
      if: success() || failure()
      with:
          name: Unit Test Results
          path: ${{ env.UNIT_TEST_RESULTS_XML }}
          reporter: java-junit
          only-summary: 'false'
          fail-on-error: 'true'   #Set True to enable Quality Gate

      # Upload unit test results path for developer review and badge rendering
    - name: Upload Unit Test Results Artifact for Badges
      uses: actions/upload-artifact@v3
      with:
          name: unit-test-results
          path: ${{ env.UNIT_TEST_RESULTS_XML }}
    - name: "SonarQube Setup"
      uses: warchant/setup-sonar-scanner@v3
    - name: "Sonar Scanning"
      run: sonar-scanner -X 
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.projectVersion=${{steps.build_number.outputs.build_version}}
            -Dsonar.scm.provider=tfvc
            -Dsonar.tfvc.collectionuri="https://workaround-tfvc-plugin-issue/DefaultCollection"
            -Dsonar.language=java
            -Dsonar.exclusions=**/*.java
            -Dsonar.qualitygate.wait=true    
      
    - name: listing
      run: ls -laRt

            
    - name: zip for GitHub releases
      shell: pwsh
      run: |
         Compress-Archive -Path  target\*  -Destination ${{ github.event.repository.name }}.zip
         ls
  
    - name: Create Release and Upload Artifacts
      uses: ncipollo/release-action@v1
      with:
        artifacts: ${{ github.event.repository.name }}.zip
        tag: "${{ github.run_number }}"
        name: "${{ github.run_number }}"
        allowUpdates: true
        replacesArtifacts: false
